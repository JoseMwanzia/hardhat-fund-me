{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// Get funds from users\n// withdraw funds\n// set a minimum value in USD\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PriceConverter.sol\";\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    address[] public funders;\n    // 656,355\n    // 636,417\n\n    mapping(address => uint256) public addressToAmountFunded;\n\n    function fund() public payable {\n        // we want to be able to send minimum amount in usd\n        // 1. How do we send ether to this contract?\n        // inter-changed the values of the require() arguments after importing the PriceConverter liblary\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Didn't send enough!\"\n        );\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    address public immutable I_OWNER;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n        I_OWNER = msg.sender;\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 fundersIndex = 0;\n            fundersIndex < funders.length;\n            fundersIndex++\n        ) {\n            address funder = funders[fundersIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        // reset the array\n        funders = new address[](0);\n        // actually withdraw the funds\n\n        // transfer\n        // send\n\n        // call\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed!\");\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == I_OWNER, \"Sender is not owner!\");\n        _;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\n\nlibrary PriceConverter {\n\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        // ABI\n        // Address 0x694AA1769357215DE4FAC081bf1f309aDC325306\n            // AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306); // WE NO LONGER NEED THIS BEACUSE WE SET 'AggregatorV3Interface priceFeed'\n            (,int256 price,,,) = priceFeed.latestRoundData(); \n        // ETH in terms of usd\n        return uint256(price * 1e18);\n    }\n\n    // function getVersion() public view returns(uint256) {\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\n    //     return priceFeed.version();\n    // } // IS HERE TO SHOW HOW TO WORK WITH INTERFACES, THEREFORE WE DONT REALLY NEED IT IN OUR CODE BASE\n\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1*18;\n        return ethAmountInUsd;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}